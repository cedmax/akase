{"name":"Akase","tagline":"a small decoupled, event-driven architecture framework.","body":"# ākāśe [![Build Status](https://travis-ci.org/cedmax/akase.png?branch=master)](https://travis-ci.org/cedmax/akase)\r\n\r\nākāśe (sanskrit for \"in the sky\"/\"to the sky\") is a small decoupled, event-driven architecture framework.\r\nIt is based on Nicholas Zakas [Scalable Javascript Application Architecture](http://www.slideshare.net/nzakas/scalable-javascript-application-architecture-2012) and [RequireJS and AMD](http://www.slideshare.net/iivanoo/requirejs-12937421).\r\n\r\n## Concepts\r\nThe concepts of the framework are well represented by the two presentations linked above.\r\nBasically everything gets sandboxed and everyone is happy. ([play with it](https://github.com/cedmax/akase-playground))\r\n\r\n## Modules & Sandbox\r\nThe modules you will have to create are proper AMD modules with this skeleton\r\n\r\n```js\r\ndefine(function(){\r\n    'use strict';\r\n\r\n    return function(sandbox){\r\n\r\n\t\t//the logic of the module\r\n\t\tfunction doSomething(){\r\n\t\t\t//do something\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t \t\tinit:function(config){\r\n\t                //the initialization code\r\n\t    \t\tsandbox.subscribe('myEventName', doSomething)\r\n\t\t\t},\r\n\t        destroy: function(){\r\n\t    \t    //optional destroy method, useful to remove callbacks from DOM event\r\n\t        }\r\n\t    };\r\n\r\n\t};\r\n});\r\n```\r\n\r\nAs in the example, every module has access to the sandbox, which is supposed to be the only external api accessible, but no one forces you not to require a framework (watch out that you are coupling your code with that specific framework, just saying)\r\n\r\n```js\r\ndefine(['jQuery'], function($){\r\n    'use strict';\r\n\r\n    return function(sandbox){\r\n\r\n\t\tfunction doSomething(){\r\n\t\t\t//do something\r\n\t\t}\r\n\r\n        return {\r\n            init:function(config){\r\n            \t$('#myElm').on('click', doSomething);\r\n            }\r\n        };\r\n    };\r\n});\r\n```\r\n\r\nThe sandbox API should be defined/extended by you, the only API available out of the box allows to:\r\n\r\n- access the module name\r\n\r\n\t\tsandbox.module\r\n\r\n- publish an event through the whole architecture\r\n\r\n\t\tsandbox.publish(eventName, payload)\r\n\r\n\tParameters:\r\n\t- eventName _String_ - the name of the event\r\n\t- payload _Object_ - the optional payload to be sent to the subscribing modules<br/><br/>\r\n\r\n- subscribe to an event\r\n\r\n\t\tsandbox.subscribe(eventName(s), callback)\r\n\r\n\tParameters:\r\n\t- eventName(s) _String|Array[String]_ - the event(s) the module will subscribe to\r\n\t- callback _Function_ - the callback to be invoked (the payload will be injected as argument)<br/><br/>\r\n\r\n- namespace your own Api\r\n\r\n\t\tsandbox.api\r\n\r\n\r\n## Setup & Core\r\nEverything gets started in a proper RequireJS way\r\n\r\n\t<script data-main=\"main.js\" src=\"/assets/javascripts/require.js\"></script>\r\n\r\n\r\nThe main file should require ākāśe core lib in order to take advantage of the framework\r\n\r\n\trequire(['akase'], function(core) {\r\n\t\t//[...]\r\n\t});\r\n\r\n\r\nthe core exposes 3 methods in order to:\r\n\r\n- load and initialize a module\r\n\r\n\t\tstart(moduleId, options)\r\n\r\n\tParameters:\r\n\t- moduleId _String_ - the name of the module\r\n\t- options _Object_ - 2 properties allowed:\r\n\t\t- config _Object_ - a configuration object to be injected in the init of the module\r\n\t\t- event _String_ - an event that drives the module start<br/><br/>\r\n\r\n- stop and undefine the module (next start will reload the resource)\r\n\r\n\t\tstop(moduleId)\r\n\r\n\tParameters:\r\n\t- moduleId (String) - the name of the module<br/><br/>\r\n\r\n- broadcast events into the architecture, it works as the sandbox.publish\r\n\r\n\t\tnotify(event, payload)\r\n\r\n\tParameters:\r\n\t- eventName _String_ - the name of the event\r\n\t- payload _Object_ - the optional payload to be sent to the subscribing modules<br/><br/>\r\n\r\n\r\nexample of a proper main.js\r\n\r\n```js\r\nrequire(['akase'], function(core) {\r\n\r\n\tvar audio  = document.createElement(\"audio\"),\r\n\tcanPlayMP3 = (typeof audio.canPlayType === \"function\" && audio.canPlayType(\"audio/mpeg\") !== \"\");\r\n\r\n\tcore.start(\"module1\", {\r\n\t\tconfig: {\r\n\t\t\thasMp3Support: canPlayMP3\r\n\t\t}\r\n\t});\r\n\r\n\tcore.start(\"module2\");\r\n\tcore.start(\"module3\", { event: \"audio:stop\" });\r\n\r\n});\r\n```\r\n\r\nIn order to have RequireJS proper loading modules you'd read [RequireJS documentation](http://www.requirejs.org/) to configure the paths\r\n\r\n#Thanks\r\nTo all the guys that helped me creating ākāśe with their inspiration or making me copy their ideas: [Marco Pracucci](https://github.com/pracucci), [Rocco Zanni](https://github.com/roccozanni), [Luca Lischetti](https://github.com/sirlisko), [Rocco Curcio](https://github.com/jsDotCr)\r\n","google":"UA-240287-32","note":"Don't delete this file! It's used internally to help with page regeneration."}